#ifndef __GRAPHICS_LAB__EXERCISE__HPP__
#define __GRAPHICS_LAB__EXERCISE__HPP__

#include "cellular_automaton.hpp"
#include "simple_cell.hpp"

#include "ca_ruleset.hpp"
#include "game_of_life.hpp"
#include "simple_1d_ca.hpp"
#include "custom_ca.hpp"

#include "vmml_includes.hpp"

#include <gloo/default_window.hpp>
#include <gloo/timer.hpp>

#include <cstddef>


namespace graphics_lab
{

class exercise : public gloo::default_window, public gloo::mouse_target
{
public:
    typedef cellular_automaton< simple_cell > simple_ca;

    exercise( size_t width, size_t height );
    ~exercise();

    virtual void draw();
    
    // keyboard handling
    virtual void on_key_down( unsigned char key );
    // mouse handling
    virtual void mouse_update( const gloo::mouse_state& mouse_state_ );    
    // idle handling
    virtual void on_idle();

    void    print_help();

protected:
    virtual void _draw_background();
    
    void    _setup_opengl();
    void    _setup_ca();
    void    _setup_mouse();

    void    _draw_quads();
    void    _draw_points();
    void    _draw_cell( const simple_cell& cell, const vec3f& base, const vec3f& size );
    
    cellular_automaton< simple_cell >   _ca;

    size_t      _draw_mode;
    bool        _run;
    bool        _step;
    
    ca_ruleset*     _ca_ruleset;
    
    game_of_life*   _game_of_life;
    simple_1d_ca*   _simple_1d_ca;
    custom_ca*      _custom_ca;
    
    gloo::timer     _timer;
    float           _ca_update_rate;

}; // class exercise

} // namespace graphics_lab

#endif

